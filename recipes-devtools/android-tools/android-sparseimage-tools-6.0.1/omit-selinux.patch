Index: 6.0.1-r46/extras/ext4_utils/make_ext4fs.c
===================================================================
--- 6.0.1-r46.orig/extras/ext4_utils/make_ext4fs.c	2016-06-23 10:33:10.659863452 -0700
+++ 6.0.1-r46/extras/ext4_utils/make_ext4fs.c	2016-06-23 10:59:21.744832439 -0700
@@ -59,8 +59,12 @@
 
 #else
 
+#ifdef HAVE_SELINUX
 #include <selinux/selinux.h>
 #include <selinux/label.h>
+#else
+struct selabel_handle;
+#endif
 
 #define O_BINARY 0
 
@@ -96,7 +100,7 @@
 	inode_set_permissions(inode, dentries.mode,
 		dentries.uid, dentries.gid, dentries.mtime);
 
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(HAVE_SELINUX)
 	if (sehnd) {
 		char *path = NULL;
 		char *secontext = NULL;
@@ -210,7 +214,7 @@
 			error("can't set android permissions - built without android support");
 #endif
 		}
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(HAVE_SELINUX)
 		if (sehnd) {
 			if (selabel_lookup(sehnd, &dentries[i].secon, dentries[i].path, stat.st_mode) < 0) {
 				error("cannot lookup security context for %s", dentries[i].path);
@@ -261,10 +265,12 @@
 		dentries[0].file_type = EXT4_FT_DIR;
 		dentries[0].uid = 0;
 		dentries[0].gid = 0;
+#ifdef HAVE_SELINUX
 		if (sehnd) {
 			if (selabel_lookup(sehnd, &dentries[0].secon, dentries[0].path, dentries[0].mode) < 0)
 				error("cannot lookup security context for %s", dentries[0].path);
 		}
+#endif
 		entries++;
 		dirs++;
 	}
@@ -310,9 +316,11 @@
 		 * the calls in the proper order.
 		 * Please see xattr_assert_sane() in contents.c
 		 */
+#ifdef HAVE_SELINUX
 		ret = inode_set_selinux(entry_inode, dentries[i].secon);
 		if (ret)
 			error("failed to set SELinux context on %s\n", dentries[i].path);
+#endif
 		ret = inode_set_capabilities(entry_inode, dentries[i].capabilities);
 		if (ret)
 			error("failed to set capability on %s\n", dentries[i].path);
@@ -614,7 +622,7 @@
 	root_mode = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
 	inode_set_permissions(root_inode_num, root_mode, 0, 0, 0);
 
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(HAVE_SELINUX)
 	if (sehnd) {
 		char *secontext = NULL;
 
Index: 6.0.1-r46/extras/ext4_utils/make_ext4fs_main.c
===================================================================
--- 6.0.1-r46.orig/extras/ext4_utils/make_ext4fs_main.c	2016-06-23 10:33:10.659863452 -0700
+++ 6.0.1-r46/extras/ext4_utils/make_ext4fs_main.c	2016-06-23 11:03:21.847797503 -0700
@@ -30,8 +30,10 @@
 #endif
 
 #ifndef USE_MINGW
+#ifdef HAVE_SELINUX
 #include <selinux/selinux.h>
 #include <selinux/label.h>
+#endif
 #if !defined(HOST)
 #include <selinux/android.h>
 #endif
@@ -80,7 +82,7 @@
 	time_t fixed_time = -1;
 	struct selabel_handle *sehnd = NULL;
 	FILE* block_list_file = NULL;
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(HAVE_SELINUX)
 	struct selinux_opt seopts[] = { { SELABEL_OPT_PATH, "" } };
 #endif
 
@@ -141,7 +143,7 @@
 			fprintf(stderr, "Warning: -t (initialize inode tables) is deprecated\n");
 			break;
 		case 'S':
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(HAVE_SELINUX)
 			seopts[0].value = optarg;
 			sehnd = selabel_open(SELABEL_CTX_FILE, seopts, 1);
 			if (!sehnd) {
@@ -190,8 +192,10 @@
 			exit(EXIT_FAILURE);
 		}
 		fs_config_func = canned_fs_config;
+#ifdef ANDROID
 	} else if (mountpoint) {
 		fs_config_func = fs_config;
+#endif
 	}
 
 	if (wipe && sparse) {
